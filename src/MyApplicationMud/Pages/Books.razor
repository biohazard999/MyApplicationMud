@page "/books"
@attribute [Authorize]
@inherits FluxorComponent
@inject IState<BooksState> State
@inject IDispatcher Dispatcher

<PageTitle>Books</PageTitle>
<MudText Typo="Typo.h3" GutterBottom="true">Books (@State.Value.Items.Count)</MudText>

<div style="position: fixed; bottom: 2rem; right: 2rem;">
    <MudFab Color="Color.Primary" Size="Size.Large" StartIcon="@Icons.Material.Filled.Refresh" Label="Aktualisieren" OnClick="() => Dispatcher.Dispatch(new RefreshBooksAction())" />
    <MudFab Color="Color.Primary" Size="Size.Large" StartIcon="@Icons.Material.Filled.Add" Label="Neu" OnClick="() => Dispatcher.Dispatch(new AddBookAction())" />
</div>

@if (State.Value.IsLoading)
{
    <MudOverlay DarkBackground="true" Visible="true"></MudOverlay>
    <MudGrid>
        @for (var i = 0; i <= 10; i++)
        {
            <MudItem xs="12" sm="6" md="4" lg="3" xl="2">
                <MudCard Outlined="true">
                    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="100px" />
                    <MudCardContent>
                        <MudSkeleton Width="30%" Height="42px;" />
                        <MudSkeleton Width="80%" />
                        <MudSkeleton Width="100%" />
                    </MudCardContent>
                    <MudCardActions>
                        <MudSkeleton Width="64px" Height="40px" Class="ml-2" />
                        <MudSkeleton Width="105px" Height="40px" Class="ml-3" />
                    </MudCardActions>
                </MudCard>
            </MudItem>
        }
    </MudGrid>
}

@if (State.Value.HasErrors)
{
    <MudText Typo="Typo.h6" GutterBottom="true">Errors have occured</MudText>

    @foreach (var error in State.Value.Errors)
    {
        <MudText>@error.ToString()</MudText>

        @if (error.Exception != null)
        {
            <MudText>@error.Exception.ToString()</MudText>
        }
    }

}

@if (!State.Value.IsLoading)
{
    <MudGrid>
        @foreach (var item in State.Value.Items)
        {
            <MudItem xs="12" sm="6" md="4" lg="3" xl="2">
                <MudCard Outlined="true" Style="height:100%;">
                    <MudCardHeader>
                        <CardHeaderAvatar />
                        <CardHeaderContent />
                        <CardHeaderActions>
                            <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Default" />
                        </CardHeaderActions>
                    </MudCardHeader>
                    <MudHidden Breakpoint="Breakpoint.SmAndDown">
                        <MudCardMedia Image="@item.Image" />
                    </MudHidden>
                    <MudCardContent>
                        <MudText>@item.Title</MudText>
                        <MudText Typo="Typo.body2">@item.Author.Name</MudText>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Variant="Variant.Text" Color="Color.Secondary" OnClick="() => Dispatcher.Dispatch(new DeleteBookAction(item.Id))">Löschen</MudButton>
                        <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="() => Dispatcher.Dispatch(new EditBookAction(item.Id))">Bearbeiten</MudButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        }
    </MudGrid>
}
@code {
    protected override void OnInitialized()
    {
        base.OnInitialized();
        Dispatcher.Dispatch(new RefreshBooksAction());
    }
}
