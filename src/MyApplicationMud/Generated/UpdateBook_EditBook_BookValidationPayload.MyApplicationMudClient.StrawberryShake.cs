// <auto-generated/>
#nullable enable

namespace MyApplicationMud.GraphQL
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class UpdateBook_EditBook_BookValidationPayload : global::System.IEquatable<UpdateBook_EditBook_BookValidationPayload>, IUpdateBook_EditBook_BookValidationPayload
    {
        public UpdateBook_EditBook_BookValidationPayload(global::System.Collections.Generic.IReadOnlyList<global::MyApplicationMud.GraphQL.IUpdateBook_EditBook_Errors> errors, global::MyApplicationMud.GraphQL.IUpdateBook_EditBook_Value? @value)
        {
            Errors = errors;
            Value = @value;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::MyApplicationMud.GraphQL.IUpdateBook_EditBook_Errors> Errors { get; }

        public global::MyApplicationMud.GraphQL.IUpdateBook_EditBook_Value? Value { get; }

        public virtual global::System.Boolean Equals(UpdateBook_EditBook_BookValidationPayload? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Errors, other.Errors)) && ((Value is null && other.Value is null) || Value != null && Value.Equals(other.Value));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((UpdateBook_EditBook_BookValidationPayload)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var Errors_elm in Errors)
                {
                    hash ^= 397 * Errors_elm.GetHashCode();
                }

                if (Value != null)
                {
                    hash ^= 397 * Value.GetHashCode();
                }

                return hash;
            }
        }
    }
}
