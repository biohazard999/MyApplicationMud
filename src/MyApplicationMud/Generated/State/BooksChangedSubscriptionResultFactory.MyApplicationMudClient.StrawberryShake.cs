// <auto-generated/>
#nullable enable

namespace MyApplicationMud.GraphQL.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class BooksChangedSubscriptionResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::MyApplicationMud.GraphQL.BooksChangedSubscriptionResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::MyApplicationMud.GraphQL.State.BookEntity, BooksChangedSubscription_Changed_Book> _booksChangedSubscription_Changed_BookFromBookEntityMapper;
        public BooksChangedSubscriptionResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::MyApplicationMud.GraphQL.State.BookEntity, BooksChangedSubscription_Changed_Book> booksChangedSubscription_Changed_BookFromBookEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _booksChangedSubscription_Changed_BookFromBookEntityMapper = booksChangedSubscription_Changed_BookFromBookEntityMapper ?? throw new global::System.ArgumentNullException(nameof(booksChangedSubscription_Changed_BookFromBookEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::MyApplicationMud.GraphQL.IBooksChangedSubscriptionResult);
        public BooksChangedSubscriptionResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is BooksChangedSubscriptionResultInfo info)
            {
                return new BooksChangedSubscriptionResult(MapNonNullableIBooksChangedSubscription_Changed(info.Changed, snapshot));
            }

            throw new global::System.ArgumentException("BooksChangedSubscriptionResultInfo expected.");
        }

        private global::MyApplicationMud.GraphQL.IBooksChangedSubscription_Changed MapNonNullableIBooksChangedSubscription_Changed(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Book", global::System.StringComparison.Ordinal))
            {
                return _booksChangedSubscription_Changed_BookFromBookEntityMapper.Map(snapshot.GetEntity<global::MyApplicationMud.GraphQL.State.BookEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }
}
