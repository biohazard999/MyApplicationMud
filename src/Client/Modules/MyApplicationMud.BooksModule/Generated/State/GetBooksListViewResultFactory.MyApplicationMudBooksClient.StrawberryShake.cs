// <auto-generated/>
#nullable enable

namespace MyApplicationMud.BooksModule.GraphQL.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GetBooksListViewResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::MyApplicationMud.BooksModule.GraphQL.GetBooksListViewResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::MyApplicationMud.BooksModule.GraphQL.State.BookEntity, GetBooksListView_Items_Book> _getBooksListView_Items_BookFromBookEntityMapper;
        public GetBooksListViewResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::MyApplicationMud.BooksModule.GraphQL.State.BookEntity, GetBooksListView_Items_Book> getBooksListView_Items_BookFromBookEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getBooksListView_Items_BookFromBookEntityMapper = getBooksListView_Items_BookFromBookEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getBooksListView_Items_BookFromBookEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::MyApplicationMud.BooksModule.GraphQL.IGetBooksListViewResult);
        public GetBooksListViewResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetBooksListViewResultInfo info)
            {
                return new GetBooksListViewResult(MapNonNullableIGetBooksListView_ItemsNonNullableArray(info.Items, snapshot));
            }

            throw new global::System.ArgumentException("GetBooksListViewResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::MyApplicationMud.BooksModule.GraphQL.IGetBooksListView_Items> MapNonNullableIGetBooksListView_ItemsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var books = new global::System.Collections.Generic.List<global::MyApplicationMud.BooksModule.GraphQL.IGetBooksListView_Items>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                books.Add(MapNonNullableIGetBooksListView_Items(child, snapshot));
            }

            return books;
        }

        private global::MyApplicationMud.BooksModule.GraphQL.IGetBooksListView_Items MapNonNullableIGetBooksListView_Items(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Book", global::System.StringComparison.Ordinal))
            {
                return _getBooksListView_Items_BookFromBookEntityMapper.Map(snapshot.GetEntity<global::MyApplicationMud.BooksModule.GraphQL.State.BookEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }
}
