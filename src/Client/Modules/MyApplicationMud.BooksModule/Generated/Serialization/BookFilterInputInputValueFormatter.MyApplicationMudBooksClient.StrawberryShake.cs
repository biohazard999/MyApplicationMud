// <auto-generated/>
#nullable enable

namespace MyApplicationMud.BooksModule.GraphQL
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class BookFilterInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _bookFilterInputFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _comparableInt32OperationFilterInputFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringOperationFilterInputFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _authorFilterInputFormatter = default !;
        public global::System.String TypeName => "BookFilterInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _bookFilterInputFormatter = serializerResolver.GetInputValueFormatter("BookFilterInput");
            _comparableInt32OperationFilterInputFormatter = serializerResolver.GetInputValueFormatter("ComparableInt32OperationFilterInput");
            _stringOperationFilterInputFormatter = serializerResolver.GetInputValueFormatter("StringOperationFilterInput");
            _authorFilterInputFormatter = serializerResolver.GetInputValueFormatter("AuthorFilterInput");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::MyApplicationMud.BooksModule.GraphQL.BookFilterInput;
            var inputInfo = runtimeValue as global::MyApplicationMud.BooksModule.GraphQL.State.IBookFilterInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsAndSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("and", FormatAnd(input.And)));
            }

            if (inputInfo.IsOrSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("or", FormatOr(input.Or)));
            }

            if (inputInfo.IsIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("id", FormatId(input.Id)));
            }

            if (inputInfo.IsTitleSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("title", FormatTitle(input.Title)));
            }

            if (inputInfo.IsImageSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("image", FormatImage(input.Image)));
            }

            if (inputInfo.IsAuthorSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("author", FormatAuthor(input.Author)));
            }

            return fields;
        }

        private global::System.Object? FormatAnd(global::System.Collections.Generic.IReadOnlyList<global::MyApplicationMud.BooksModule.GraphQL.BookFilterInput>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    if (input_elm is null)
                    {
                        throw new global::System.ArgumentNullException(nameof(input_elm));
                    }

                    input_list.Add(_bookFilterInputFormatter.Format(input_elm));
                }

                return input_list;
            }
        }

        private global::System.Object? FormatOr(global::System.Collections.Generic.IReadOnlyList<global::MyApplicationMud.BooksModule.GraphQL.BookFilterInput>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    if (input_elm is null)
                    {
                        throw new global::System.ArgumentNullException(nameof(input_elm));
                    }

                    input_list.Add(_bookFilterInputFormatter.Format(input_elm));
                }

                return input_list;
            }
        }

        private global::System.Object? FormatId(global::MyApplicationMud.BooksModule.GraphQL.ComparableInt32OperationFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _comparableInt32OperationFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatTitle(global::MyApplicationMud.BooksModule.GraphQL.StringOperationFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringOperationFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatImage(global::MyApplicationMud.BooksModule.GraphQL.StringOperationFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringOperationFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatAuthor(global::MyApplicationMud.BooksModule.GraphQL.AuthorFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _authorFilterInputFormatter.Format(input);
            }
        }
    }
}
